service: serverless-crud

auth:
  iamAuthorizer: 'aws_iam'

provider:
  name: aws
  runtime: nodejs8.10
  stage: '${file(environment.yml):stage}'
  region: '${file(environment.yml):aws-region}'
  environment:
    DYNAMODB_TABLE: '${file(environment.yml):dynamo-table}'
    REGION: '${file(environment.yml):aws-region}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: user
          method: post
          authorizer: '${self:auth.iamAuthorizer}'

  read:
    handler: handler.read
    events:
      - http:
          path: user/{aadharNumber}
          method: get
          authorizer: '${self:auth.iamAuthorizer}'

  update:
    handler: handler.update
    events:
      - http:
          path: user/{aadharNumber}
          method: put
          authorizer: '${self:auth.iamAuthorizer}'

  delete:
    handler: handler.delete
    events:
      - http:
          path: user/{aadharNumber}
          method: delete
          authorizer: '${self:auth.iamAuthorizer}'

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}